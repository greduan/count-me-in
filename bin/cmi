#!/usr/bin/env node

var docopt = require('docopt').docopt;
var path = require('path');
var CountMeIn = require('..');
var fs = require('fs');

var doc = 'Usage: cmi [-d DIR] [-r] NAME [(NUM | --reset)]' +
'\n' +
'\nOptions:' +
'\n  -h --help  Show this screen.' +
'\n  -r         NUM removes from the counter instead of increasing it.' +
'\n  --reset    If used, it makes the count 0.' +
'\n  -d DIR     The directory where to store the counter(s). [default: .cmi-counters]'
var cli = docopt(doc, {help: true, version: '0.2.0'});
// return console.log(cli);

if (cli['NUM'] === null)
	cli['NUM'] = 1;

// TODO Should probably find a cleaner way to do this...
var file = path.resolve('/home', process.env['USER'], cli['-d'], cli['NAME']);
// return console.log(file);

function appendStrToFile(file, str, cb) {
	fs.appendFile(file, str, function(err){
		if (err) return console.error(err);
		else cb(arguments);
	});
}

function readFile(file, cb) {
	fs.readFile(file, {encoding: 'utf8'}, function(err, data){
		if (err) {
			if (err.code === 'ENOENT') {
				console.error('FILE AND/OR DIRECTORY DOESN\'T EXIST\nThe file will be created but make sure the directory exists...');
				var firstLine = CountMeIn.makeLine(0);
				appendStrToFile(file, firstLine, function(a){
					console.log(firstLine);
				});
			} else return console.error(err);
		} else return cb(data);
	});
}

/*
readFile()
    CountMeIn.readLastLine()
    |
    v
    CountMeIn.add()
    |
    v
    CountMeIn.makeLine()
    |
    v
    appendStrToFile()
*/

if (cli['--reset']) {
	readFile(file, function(data){
		var resetLine = CountMeIn.makeLine(0);
		appendStrToFile(file, resetLine, function(a){
			console.log(resetLine);
		});
	});
	return;
}

readFile(file, function(data){
	var lastLineInt = CountMeIn.readLastLine(data);
	var newInt = CountMeIn.add(lastLineInt, parseInt(cli['NUM']), cli['-r']);
	var newLine = CountMeIn.makeLine(newInt);
	appendStrToFile(file, newLine, function(a){
		return console.log(newLine);
	});
});

